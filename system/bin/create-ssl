#!/bin/bash

# Arguments:
# create-ssl [domain_base] [password]
#
# The final domain will be composed by combining the domain_base provided as argument 
# with the extension stored in INSTALL_DIR/.domain. For example, if domain_base is "example" 
# and .domain contains "dev", the final domain becomes "example.dev".

# Set INSTALL_DIR
INSTALL_DIR="/usr/local/apachep"

# Read the domain extension from INSTALL_DIR/.domain if exists, otherwise use "dev".
if [ -f "$INSTALL_DIR/.domain" ]; then
  domain_ext=$(cat "$INSTALL_DIR/.domain")
else
  domain_ext="dev"
fi

# Get the domain base from the first argument.
domain_base=$1

# Compose the final domain.
domain="${domain_base}.${domain_ext}"

# Set the path based on the final domain.
path=/var/www/$domain

# Optional password for SSL generation.
password=""

# If a password is provided as second argument, use it.
if [ $# -eq 2 ]; then
  password=$2
fi

# Ensure the SSL directory exists.
mkdir -p "$path/ssl"

# Clear old SSL files if they exist.
if test -f "$path/ssl/$domain.key"; then
  echo "Clearing old key file"
  rm "$path/ssl/$domain.key"
fi
if test -f "$path/ssl/$domain.csr"; then
  echo "Clearing old CSR file"
  rm "$path/ssl/$domain.csr"
fi
if test -f "$path/ssl/$domain.crt"; then
  echo "Clearing old CRT file"
  rm "$path/ssl/$domain.crt"
fi

# Ensure the CA certificates directory exists.
if ! test -d "/usr/local/share/ca-certificates/"; then
  mkdir -p /usr/local/share/ca-certificates/
fi

# Save the password for reference.
echo "$password" > "$path/ssl/password"

# Generate a key (with passphrase if provided).
echo "Generating key for $domain [passwd: $password]"
if [ -n "$password" ]; then
  openssl genrsa -des3 -passout pass:"$password" -out "$path/ssl/$domain.key" 2048
else
  openssl genrsa -out "$path/ssl/$domain.key" 2048
fi

# Remove passphrase from the key if a password was used.
if [ -n "$password" ]; then
  echo "Removing passphrase from key"
  openssl rsa -in "$path/ssl/$domain.key" -passin pass:"$password" -out "$path/ssl/$domain.key"
fi

# Create the Certificate Signing Request (CSR).
echo "Creating CSR"
if [ -n "$password" ]; then
  openssl req -new -key "$path/ssl/$domain.key" -out "$path/ssl/$domain.csr" -passin pass:"$password" \
    -subj "/C=TR/ST=Istanbul/L=Turkey/O=Hodein/OU=IT/CN=$domain/emailAddress=admin@$domain"
else
  openssl req -new -key "$path/ssl/$domain.key" -out "$path/ssl/$domain.csr" \
    -subj "/C=TR/ST=Istanbul/L=Turkey/O=Hodein/OU=IT/CN=$domain/emailAddress=admin@$domain"
fi

# Self-sign the certificate.
if [ -n "$password" ]; then
  openssl x509 -in "$path/ssl/$domain.csr" -out "$path/ssl/$domain.crt" -req -signkey "$path/ssl/$domain.key" -days 365 -passin pass:"$password"
else
  openssl x509 -in "$path/ssl/$domain.csr" -out "$path/ssl/$domain.crt" -req -signkey "$path/ssl/$domain.key" -days 365
fi

# Secure the SSL files.
chmod 700 "$path/ssl/$domain".*

echo "Restarting apache..."
systemctl restart apache2.service
