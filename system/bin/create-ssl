#!/bin/bash
set -e

# Usage:
# create-ssl [domain_base] [template] [password]
#
# The final domain is composed by combining the domain_base provided as argument 
# with the extension stored in INSTALL_DIR/.domain. For example, if domain_base is "example" 
# and .domain contains "dev", the final domain becomes "example.dev".
#
# - domain_base: Base domain name (e.g., "example")
# - template: Template name to be used for configuration (without the .template extension).
#             **Default value:** "default.ssl". The provided template MUST end with ".ssl".
# - password: (Optional) Password for SSL generation.

# Set INSTALL_DIR
INSTALL_DIR="/usr/local/apachep"

# Read the domain extension from INSTALL_DIR/.domain if exists, otherwise use "dev".
if [ -f "$INSTALL_DIR/.domain" ]; then
  domain_ext=$(cat "$INSTALL_DIR/.domain")
else
  domain_ext="dev"
fi

# Check if at least one argument (domain_base) is provided.
if [ "$#" -lt 1 ]; then
  echo "Usage: $0 [domain_base] [template] [password]"
  exit 1
fi

# Get the domain base from the first argument.
domain_base=$1

# Get template from the second argument, or use default if not provided.
if [ "$#" -ge 2 ]; then
  template=$2
else
  template="default.ssl"
fi

# Enforce that the template ends with ".ssl". If not, override with default.
if [[ "$template" != *.ssl ]]; then
  echo "Error: The provided template must end with .ssl. Using default template 'default.ssl'."
  template="default.ssl"
fi

# Get the optional password from the third argument.
password=""
if [ "$#" -ge 3 ]; then
  password=$3
fi

# Compose the final domain.
domain="${domain_base}.${domain_ext}"

# Now, before generating SSL configuration via create-conf,
# ensure that the Apache configuration for the domain exists.
conf_path="/etc/apache2/sites-available/${domain}.conf"
if [ ! -f "$conf_path" ]; then
  echo "Error: Configuration file $conf_path does not exist. Please create it before generating SSL configuration."
  exit 1
fi

# Set the path based on the final domain.
path=/var/www/$domain

echo "Domain: $domain"
echo "Template: $template"
echo "Password: $password"

# Ensure the SSL directory exists.
mkdir -p "$path/ssl"

# Clear old SSL files if they exist.
if test -f "$path/ssl/$domain.key"; then
  echo "Clearing old key file"
  rm "$path/ssl/$domain.key"
fi
if test -f "$path/ssl/$domain.csr"; then
  echo "Clearing old CSR file"
  rm "$path/ssl/$domain.csr"
fi
if test -f "$path/ssl/$domain.crt"; then
  echo "Clearing old CRT file"
  rm "$path/ssl/$domain.crt"
fi

# Ensure the CA certificates directory exists.
if ! test -d "/usr/local/share/ca-certificates/"; then
  mkdir -p /usr/local/share/ca-certificates/
fi

# Save the password for reference.
echo "$password" > "$path/ssl/password"

# Generate a key (with passphrase if provided).
echo "Generating key for $domain [passwd: $password]"
if [ -n "$password" ]; then
  openssl genrsa -des3 -passout pass:"$password" -out "$path/ssl/$domain.key" 2048
else
  openssl genrsa -out "$path/ssl/$domain.key" 2048
fi

# Remove passphrase from the key if a password was used.
if [ -n "$password" ]; then
  echo "Removing passphrase from key"
  openssl rsa -in "$path/ssl/$domain.key" -passin pass:"$password" -out "$path/ssl/$domain.key"
fi

# Create the Certificate Signing Request (CSR).
echo "Creating CSR"
if [ -n "$password" ]; then
  openssl req -new -key "$path/ssl/$domain.key" -out "$path/ssl/$domain.csr" -passin pass:"$password" \
    -subj "/C=TR/ST=Istanbul/L=Turkey/O=Hodein/OU=IT/CN=$domain/emailAddress=admin@$domain"
else
  openssl req -new -key "$path/ssl/$domain.key" -out "$path/ssl/$domain.csr" \
    -subj "/C=TR/ST=Istanbul/L=Turkey/O=Hodein/OU=IT/CN=$domain/emailAddress=admin@$domain"
fi

# Self-sign the certificate.
if [ -n "$password" ]; then
  openssl x509 -in "$path/ssl/$domain.csr" -out "$path/ssl/$domain.crt" -req -signkey "$path/ssl/$domain.key" -days 365 -passin pass:"$password"
else
  openssl x509 -in "$path/ssl/$domain.csr" -out "$path/ssl/$domain.crt" -req -signkey "$path/ssl/$domain.key" -days 365
fi

# Secure the SSL files.
chmod 700 "$path/ssl/$domain".*

# Extract the PHP version from the existing configuration (if available).
php_version_extracted=$(grep 'SetHandler "proxy:unix:/run/php/php' "$conf_path" | sed -n 's/.*proxy:unix:\/run\/php\/php\([0-9.]*\)-fpm.sock.*/\1/p')
if [ -z "$php_version_extracted" ]; then
  php_version_extracted="default"
fi

echo "Extracted PHP version from configuration: $php_version_extracted"

# Call the create-conf command with the extracted PHP version, the provided template, and port 443.
apachep create-conf "$domain" "$php_version_extracted" "$template" "443"

a2ensite "$domain.ssl.conf"

echo "Restarting apache..."
systemctl restart apache2.service
